#Updated at Fri May 31 22:58:52 EDT 2013
#Fri May 31 22:58:52 EDT 2013
mongo.host=127.0.0.1
mongo.name=playerApp
mongo.password=
mongo.port=27017
mongo.username=



###
## Fine tuning parameters for mongo
###

## The maximum number of connections allowed per host for this Mongo instance
## Default is 10
mongo.connectionsPerHost=10

## This multiplier, multiplied with the connectionsPerHost setting, gives the
## maximum number of threads that may be waiting for a connection to become
## available from the pool. All further threads will get an exception right
## away. For example if connectionsPerHost is 10 and 
## threadsAllowedToBlockForConnectionMultiplier is 5, then up to 50 threads
## can wait for a connection. 
## Default is 5. 
mongo.threadsAllowedToBlockForConnectionMultiplier=5

## The connection timeout in milliseconds. It is used solely when establishing
## a new connection Socket.connect(java.net.SocketAddress, int) 
## Default is 0 and means no timeout. 
mongo.connectTimeout=0

## The maximum wait time in ms that a thread may wait for a connection to 
## become available. 
## Default is 120,000. 
mongo.maxWaitTime=120000

## If true, the driver will keep trying to connect to the same server in case
## that the socket cannot be established. There is maximum amount of time to
## keep retrying, which is 15s by default. This can be useful to avoid some
## exceptions being thrown when a server is down temporarily by blocking the
## operations. It also can be useful to smooth the transition to a new master
## (so that a new master is elected within the retry time). Note that when 
## using this flag: - for a replica set, the driver will trying to connect to
## the old master for that time, instead of failing over to the new one right
## away - this does not prevent exception from being thrown in read/write 
## operations on the socket, which must be handled by application Even if this
## flag is false, the driver already has mechanisms to automatically recreate
## broken connections and retry the read operations. 
## Default is false. 
mongo.autoConnectRetry=false

## This flag controls the socket keep alive feature that keeps a connection 
## alive through firewalls Socket.setKeepAlive(boolean) 
## Default is false. 
mongo.socketKeepAlive=false

## The socket timeout in milliseconds It is used for I/O socket read and 
## write operations Socket.setSoTimeout(int) 
## Default is 0 and means no timeout. 
mongo.socketTimeout=0

## This value determines the "safety" of the write.
## -1 : WriteConcern.NONE. Write will not report any errors regardless of 
##      network or database errors.
##  0 : WriteConcern.NORMAL. Network errors will make the write fail but 
##      mongo errors will not. This is typically referred to as 
##      "fire and forget" writes and should be used when performance is more 
##      important than consistency and durability.
##  1 : WriteConcern.SAFE. Write is considered safe. Safe writes perform the 
##      write and follow it up by a request to the server to make sure the 
##      write succeeded. As a result of that and the additional command the 
##      throughput will be signficantly lower than writes with w <= 0.
## >1 : WriteConcern.MAJORITY. Tells MongoDB to perform the write to the 
##      majority of replica set members. Values higher than 1 have a 
##      considerable impact on write throughput.
## Typicall you should set this to 1 unless you need 
## raw performance (-1 or 0) or replicated writes (>1).
## Default is 0
mongo.w=1

## The "wtimeout" value of the global WriteConcern. 
## Default is 0. 
mongo.wtimeout=0

## Durability option that forces mongo to flush to disk after each write 
## when enabled.
## Default is false
mongo.fsync=false

## This flag specifies if the driver is allowed to read from secondary (slave)
## servers. Specifically in the current implementation, the driver will avoid 
## reading from the primary server and round robin requests to secondaries.
## Driver also factors in the latency to secondaries when choosing a server.
## Note that reading from secondaries can increase performance and 
## reliability, but it may result in temporary inconsistent results. 
## Default is false. 
mongo.slaveok=false
